import java.util.*;
import net.runelite.api.Prayer;
import net.runelite.api.Skill;
import net.runelite.api.Spell;

/**
 * Combat Automation Script for Old School RuneScape (OSRS)
 * 
 * Author: Apex
 * 
 * This script automates combat actions based on the selected attack style:
 * 0 - Melee
 * 1 - Range
 * 2 - Mage
 * 
 * Functionality:
 * 1. Equips the appropriate gear based on the attack style.
 * 2. Activates the highest unlocked and applicable prayer for the combat style.
 * 3. Optionally casts the Vengeance spell prior to attacking the target.
 * 4. Executes the corresponding attack:
 *    - For Mage: Casts the first available spell that meets the Magic level requirement.
 *    - For Melee/Range: Initiates a standard attack if already in combat.
 * 5. Optionally overrides the current spell selection with a specified spell.
 */

// Initialize random number generator for future use if needed
Random rand = new Random();

// Define the current attack style.
// 0 = Melee, 1 = Range, 2 = Mage
int attackStyle = 0;

// Optional boolean to enable casting Vengeance prior to attacking
boolean castVengeance = false; // Set to 'true' to enable casting Vengeance

// *** Override Spell Functionality ***
// Optional boolean to enable overriding the current spell selection
boolean overrideSpellEnabled = false; // Set to 'true' to enable spell override

// String representing the spell to override with
String overrideSpellName = "<col=00ff00>Greater Corruption</col>"; // Customize as needed
// *** End of Override Spell Functionality ***

// Retrieve gear configurations from variables storage.
Object meleeGear = v.getVars().getObj("meleeGear");
Object rangeGear = v.getVars().getObj("rangeGear");
Object mageGear = v.getVars().getObj("mageGear");

// Retrieve spell data and prayers configurations.
Object spellData = v.getVars().getObj("spellDataList");
Object prayersObj = v.getVars().getObj("prayers");

// Initialize the gear list based on the selected attack style.
List<Integer> gear = null;

if (attackStyle == 2 && mageGear instanceof List) {
    gear = (List<Integer>) mageGear;
} else if (attackStyle == 1 && rangeGear instanceof List) {
    gear = (List<Integer>) rangeGear;
} else if (attackStyle == 0 && meleeGear instanceof List) {
    gear = (List<Integer>) meleeGear;
}

// If gear is defined, iterate through each item ID to equip.
if (gear != null) {
    gear.forEach(itemId -> {
        if (v.getInventory().hasIn(itemId)) {
            v.getInventory().equip(itemId);
            try {
                v.sleep(100, 300);
            } catch (Exception ignored) {
            }
        }
    });

    // Handle prayer activation based on the combat style.
    if (prayersObj instanceof Map) {
        String combatStyleKey = attackStyle == 0 ? "MELEE" : attackStyle == 1 ? "RANGE" : "MAGE";
        List<Map<String, Object>> combatPrayers = (List<Map<String, Object>>)
            ((Map<String, Object>) prayersObj).get(combatStyleKey);

        if (combatPrayers != null) {
            combatPrayers.stream()
                .filter(prayer -> (boolean) prayer.get("isUnlocked") 
                                 && client.getRealSkillLevel(Skill.PRAYER) >= (int) prayer.get("unlockLevel"))
                .max(Comparator.comparingInt(prayer -> (int) prayer.get("unlockLevel")))
                .ifPresent(prayer -> v.getPrayer().prayOn((Prayer) prayer.get("prayer")));
        }
    }

    // Optionally cast the Vengeance spell if enabled and requirements are met.
    if (castVengeance) {
        int boostedMagicLevel = client.getBoostedSkillLevel(Skill.MAGIC);
        if (boostedMagicLevel >= 94) {
            v.getCombat().spell(Spell.VENGEANCE);
            v.getCombat().castTarget();
        }
    }

    // Override Spell Execution
    if (overrideSpellEnabled) {
        v.invoke("Cast", overrideSpellName, 1, 57, -1, 14287024, false);
    }

    // Execute the attack based on the attack style.
    if (attackStyle == 2) { // Mage Attack
        if (!overrideSpellEnabled) {
            int boostedMagicLevel = client.getBoostedSkillLevel(Skill.MAGIC);
            List<Map<String, Object>> spells = (List<Map<String, Object>>) spellData;

            spells.stream()
                .filter(spell -> boostedMagicLevel >= (int) spell.get("requiredLevel"))
                .findFirst()
                .ifPresent(spell -> {
                    v.getCombat().spell((Spell) spell.get("spell"));
                    v.getCombat().castTarget();
                });
        }
    } else { // Melee or Range Attack
        if (v.getCombat().isInCombat()) {
            v.getCombat().attackTarget();
        }
    }
}
